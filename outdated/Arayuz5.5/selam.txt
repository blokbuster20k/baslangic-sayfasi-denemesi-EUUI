.news-widget {
  position: relative;
  margin: 1rem auto;
  margin-bottom: 5rem; /* Müzik çalar için boşluk */
  background: rgba(var(--surface-rgb), 0.8);
  border-radius: 10px;
  padding: 1rem;
  box-shadow: var(--shadow);
  border: 1px solid rgba(255, 255, 255, 0.1);
  max-width: 90%;
}

/* Haber başlığı ve kategori seçimi */
.news-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.news-header h3 {
  font-size: 1.3rem;
  font-weight: 600;
  color: var(--text);
  margin: 0;
}

.news-header select {
  padding: 0.5rem;
  border: 1px solid var(--border);
  border-radius: 5px;
  background: rgba(var(--surface-rgb), 0.8);
  color: var(--text);
  font-weight: 600;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-image: url('data:image/svg+xml;utf8,<svg fill="%23ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>');
  background-repeat: no-repeat;
  background-position: right 0.5rem center;
  background-size: 1rem;
  transition: var(--transition);
}

.news-header select:focus {
  outline: none;
  border-color: var(--primary);
}

/* Haber listesi (yan yana sıralama) */
.news-list {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  max-height: 300px;
  overflow-y: auto;
}

/* Her bir haber öğesi */
.news-item {
  flex: 1 1 calc(50% - 1rem); /* İki öğe yan yana */
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 6px;
  padding: 0.75rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: var(--transition);
}

.news-item:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-2px);
}

.news-item i {
  font-size: 1rem;
  margin-right: 0.5rem;
  color: var(--primary);
}

.news-item a {
  font-size: 0.9rem;
  font-weight: 500;
  color: var(--text);
  text-decoration: none;
  flex: 1;
}

.news-item a:hover {
  color: var(--primary);
}

.news-item .news-date {
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.6);
  margin-left: 0.5rem;
}

#######
ESKİ SCRİPT.JS 
#######
// Parçacık Efektleri Yapılandırmaları
const particleConfigs = {
    circle: {
      particles: {
        number: { value: 80, density: { enable: true, value_area: 800 } },
        color: { value: "#3a86ff" },
        shape: { type: "circle" },
        opacity: { value: 0.5, random: true, anim: { enable: true, speed: 1, opacity_min: 0.1, sync: false } },
        size: { value: 4, random: true, anim: { enable: true, speed: 2, size_min: 0, sync: false } },
        line_linked: { enable: true, distance: 150, color: "#3a86ff", opacity: 0.4, width: 1 },
        move: { enable: true, speed: 2, direction: "none", random: false, straight: false, out_mode: "out", bounce: false }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: true, mode: "repulse" }, onclick: { enable: true, mode: "push" }, resize: true },
        modes: { repulse: { distance: 100, duration: 0.4 }, push: { particles_nb: 4 } }
      },
      retina_detect: true
    },
    line: {
      particles: {
        number: { value: 50, density: { enable: true, value_area: 800 } },
        color: { value: "#ff006e" },
        shape: { type: "edge" },
        opacity: { value: 0.5, random: true },
        size: { value: 1, random: false },
        line_linked: { enable: true, distance: 150, color: "#ff006e", opacity: 0.4, width: 1 },
        move: { enable: true, speed: 2, direction: "none", random: true, straight: false, out_mode: "out" }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: true, mode: "grab" }, onclick: { enable: true, mode: "push" }, resize: true },
        modes: { grab: { distance: 140, line_linked: { opacity: 1 } }, push: { particles_nb: 4 } }
      },
      retina_detect: true
    },
    star: {
      particles: {
        number: { value: 50, density: { enable: true, value_area: 800 } },
        color: { value: "#8338ec" },
        shape: { type: "star" },
        opacity: { value: 0.8, random: true },
        size: { value: 3, random: true },
        line_linked: { enable: false },
        move: { enable: true, speed: 2, direction: "none", random: true, straight: false, out_mode: "out" }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: true, mode: "repulse" }, onclick: { enable: true, mode: "push" }, resize: true },
        modes: { repulse: { distance: 100, duration: 0.4 }, push: { particles_nb: 4 } }
      },
      retina_detect: true
    },
    snow: {
      particles: {
        number: { value: 60, density: { enable: true, value_area: 800 } },
        color: { value: "#ffffff" },
        shape: { type: "circle" },
        opacity: { value: 0.8, random: true },
        size: { value: 3, random: true },
        line_linked: { enable: false },
        move: { enable: true, speed: 2, direction: "bottom", random: true, straight: false, out_mode: "out" }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: false }, onclick: { enable: false }, resize: true }
      },
      retina_detect: true
    },
    flame: {
      particles: {
        number: { value: 60, density: { enable: true, value_area: 800 } },
        color: { value: ["#ff4500", "#ff8c00", "#ffff00"] },
        shape: { type: "circle" },
        opacity: { value: 0.7, random: true },
        size: { value: 5, random: true, anim: { enable: true, speed: 3, size_min: 1, sync: false } },
        line_linked: { enable: false },
        move: { enable: true, speed: 4, direction: "top", random: true, straight: false, out_mode: "out" }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: true, mode: "repulse" }, onclick: { enable: true, mode: "push" }, resize: true },
        modes: { repulse: { distance: 100, duration: 0.4 }, push: { particles_nb: 4 } }
      },
      retina_detect: true
    },
    fireworks: {
      particles: {
        number: { value: 20, density: { enable: true, value_area: 800 } },
        color: { value: ["#ff0000", "#00ff00", "#0000ff", "#ffff00"] },
        shape: { type: "star" },
        opacity: { value: 1, random: true },
        size: { value: 3, random: true },
        line_linked: { enable: false },
        move: { enable: true, speed: 6, direction: "none", random: true, straight: false, out_mode: "out" }
      },
      interactivity: {
        detect_on: "canvas",
        events: { onhover: { enable: false }, onclick: { enable: true, mode: "push" }, resize: true },
        modes: { push: { particles_nb: 10 } }
      },
      retina_detect: true
    }
  };
  
  // Sayfa Yüklendiğinde
  document.addEventListener('DOMContentLoaded', function() {
    // Parçacık efektlerini başlat
    loadParticles(particleConfigs.circle);
    
    // Saat ve tarih güncelleme
    updateTime();
    setInterval(updateTime, 1000);
    
    // Selamlama mesajını güncelle
    updateGreeting();
    
    // Hava durumu bilgilerini al
    getWeather();
    
    // Kaydedilmiş notları yükle
    loadSavedNotes();
    
    // Görevleri yükle
    loadSavedTodos();
    
    // Tagline rotasyonunu başlat
    startTaglineRotation();
    
    // Navigasyon öğelerine tıklama olayı ekle
    setupNavigation();
    
    // Tema ve ayarlar butonlarına tıklama olayı ekle
    document.getElementById('theme-toggle').addEventListener('click', toggleThemeSelector);
    document.getElementById('settings-toggle').addEventListener('click', toggleSettings);
    
    // Tema seçeneklerine tıklama olayı ekle
    setupThemeOptions();
    
    // Müzik çaları başlat
    initMusicPlayer();
    
    // Haberleri yükle
    loadNews();
    
    // Kaydedilmiş ayarları yükle
    loadSavedSettings();
    
    // Todo input alanına enter tuşu dinleyicisi ekle
    const todoInput = document.getElementById('todoInput');
    if (todoInput) {
      todoInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          addTodo();
        }
      });
    }
  });
  
  // Parçacık Efektlerini Yükleme
  function loadParticles(config) {
    if (window.particlesJS) {
      particlesJS('particles-js', config);
    }
  }
  
  // Parçacık Efektlerini Değiştirme
  function changeParticles() {
    const particleType = document.getElementById('particleSelect').value;
    if (particleType === 'none') {
      if (window.pJSDom && window.pJSDom.length > 0) {
        window.pJSDom[0].pJS.fn.vendors.destroypJS();
        window.pJSDom = [];
      }
    } else if (particleConfigs[particleType]) {
      loadParticles(particleConfigs[particleType]);
    }
  }
  
  // Saat ve Tarih Güncelleme
  let clockFormat = '24';
  function updateTime() {
    const now = new Date();
    let hours = now.getHours();
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    let timeString;
  
    if (clockFormat === '12') {
      const period = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12 || 12;
      timeString = `${String(hours).padStart(2, '0')}:${minutes}:${seconds} ${period}`;
    } else {
      timeString = `${String(hours).padStart(2, '0')}:${minutes}:${seconds}`;
    }
  
    const timeElement = document.getElementById('time');
    const dateElement = document.getElementById('date');
    if (timeElement) timeElement.textContent = timeString;
    if (dateElement) {
      dateElement.textContent = now.toLocaleString('tr-TR', {
        weekday: 'long', month: 'long', day: 'numeric', year: 'numeric'
      });
    }
  }
  
  // Saat Formatını Değiştirme
  function changeClockFormat() {
    const formatSelect = document.getElementById('clockFormatSelect');
    if (formatSelect) {
      clockFormat = formatSelect.value;
      updateTime();
    }
  }
  
  // Selamlama Mesajı
  let customGreeting = '';
  function updateGreeting() {
    const greetings = ['Günaydın!', 'Tünaydın!', 'İyi Akşamlar!', 'İyi Geceler!'];
    const now = new Date();
    const hour = now.getHours();
    let greeting;
    
    if (hour < 12) greeting = greetings[0];
    else if (hour < 17) greeting = greetings[1];
    else if (hour < 20) greeting = greetings[2];
    else greeting = greetings[3];
    
    const greetingElement = document.getElementById('greeting');
    if (greetingElement) {
      greetingElement.textContent = customGreeting || `${greeting} 𐰀𐰼𐰴𐰀𐰣`;
    }
  }
  
  // Özel Selamlama Mesajını Güncelleme
  function updateCustomGreeting() {
    const customGreetingInput = document.getElementById('customGreeting');
    if (customGreetingInput) {
      customGreeting = customGreetingInput.value || '';
      updateGreeting();
    }
  }
  
  // Tagline Rotasyonu
  function startTaglineRotation() {
    const taglines = document.querySelectorAll('.tagline');
    if (taglines.length === 0) return;
    
    let activeIndex = 0;
    taglines[0].classList.add('active');
    
    setInterval(() => {
      taglines[activeIndex].classList.remove('active');
      activeIndex = (activeIndex + 1) % taglines.length;
      taglines[activeIndex].classList.add('active');
    }, 5000);
  }
  
  // Navigasyon Kurulumu
  function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
      item.addEventListener('click', function() {
        navItems.forEach(i => i.classList.remove('active'));
        this.classList.add('active');
        
        const sections = document.querySelectorAll('.section');
        sections.forEach(section => section.classList.remove('active'));
        
        const sectionId = this.getAttribute('data-section');
        if (sectionId) {
          const section = document.getElementById(sectionId);
          if (section) section.classList.add('active');
        }
      });
    });
  }
  
  // Tema Seçici Aç/Kapat
  function toggleThemeSelector() {
    const themeSelector = document.getElementById('themeSelector');
    if (themeSelector) {
      themeSelector.classList.toggle('active');
    }
  }
  
  // Tema Seçenekleri Kurulumu
  function setupThemeOptions() {
    const themeOptions = document.querySelectorAll('.theme-option');
    themeOptions.forEach(option => {
      option.addEventListener('click', function() {
        const theme = this.getAttribute('data-theme');
        changeTheme(theme);
        toggleThemeSelector();
      });
    });
  }
  
  // Tema Değiştirme
  function changeTheme(theme) {
    const selectedTheme = theme || document.getElementById('themeSelect').value;
    document.body.className = '';
    document.body.classList.add(`theme-${selectedTheme}`);
    
    const themeSelect = document.getElementById('themeSelect');
    if (themeSelect && !theme) themeSelect.value = selectedTheme;
    
    updateParticleColors();
    localStorage.setItem('selectedTheme', selectedTheme);
  }
  
  // Parçacık Renklerini Güncelleme
  function updateParticleColors() {
    const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
    const secondaryColor = getComputedStyle(document.documentElement).getPropertyValue('--secondary').trim();
    
    if (window.pJSDom && window.pJSDom.length > 0) {
      const particles = window.pJSDom[0].pJS.particles;
      if (particles.color.value instanceof Array) {
        particles.color.value = [primaryColor, secondaryColor];
      } else {
        particles.color.value = primaryColor;
        particles.line_linked.color = primaryColor;
      }
      window.pJSDom[0].pJS.fn.particlesRefresh();
    }
  }
  
  // Ayarlar Panelini Aç/Kapat
  function toggleSettings() {
    const settingsPanel = document.getElementById('settingsPanel');
    if (settingsPanel) {
      settingsPanel.classList.toggle('active');
      
      if (settingsPanel.classList.contains('active')) {
        const headerHeight = document.querySelector('.top-header').offsetHeight;
        settingsPanel.style.top = `${headerHeight}px`;
        settingsPanel.style.right = '0';
        settingsPanel.style.bottom = 'auto';
      }
    }
  }
  
  // Ayarları Kaydet
  function saveSettings() {
    const themeSelect = document.getElementById('themeSelect');
    if (themeSelect) {
      localStorage.setItem('selectedTheme', themeSelect.value);
      changeTheme(themeSelect.value);
    }
    
    const particleSelect = document.getElementById('particleSelect');
    if (particleSelect) {
      localStorage.setItem('selectedParticle', particleSelect.value);
      changeParticles();
    }
    
    const clockFormatSelect = document.getElementById('clockFormatSelect');
    if (clockFormatSelect) {
      localStorage.setItem('clockFormat', clockFormatSelect.value);
      clockFormat = clockFormatSelect.value;
      updateTime();
    }
    
    const customGreetingInput = document.getElementById('customGreeting');
    if (customGreetingInput) {
      localStorage.setItem('customGreeting', customGreetingInput.value);
      customGreeting = customGreetingInput.value;
      updateGreeting();
    }
    
    const weatherUnitSelect = document.getElementById('weatherUnitSelect');
    if (weatherUnitSelect) {
      localStorage.setItem('weatherUnit', weatherUnitSelect.value);
      weatherUnit = weatherUnitSelect.value;
      getWeather();
    }
    
    toggleSettings();
    alert('Ayarlar başarıyla kaydedildi!');
  }
  
  // Kaydedilmiş Ayarları Yükle
  function loadSavedSettings() {
    const savedTheme = localStorage.getItem('selectedTheme');
    if (savedTheme) {
      const themeSelect = document.getElementById('themeSelect');
      if (themeSelect) themeSelect.value = savedTheme;
      changeTheme(savedTheme);
    }
    
    const savedParticle = localStorage.getItem('selectedParticle');
    if (savedParticle) {
      const particleSelect = document.getElementById('particleSelect');
      if (particleSelect) particleSelect.value = savedParticle;
      if (savedParticle !== 'none') loadParticles(particleConfigs[savedParticle]);
    }
    
    const savedClockFormat = localStorage.getItem('clockFormat');
    if (savedClockFormat) {
      const clockFormatSelect = document.getElementById('clockFormatSelect');
      if (clockFormatSelect) clockFormatSelect.value = savedClockFormat;
      clockFormat = savedClockFormat;
    }
    
    const savedCustomGreeting = localStorage.getItem('customGreeting');
    if (savedCustomGreeting) {
      const customGreetingInput = document.getElementById('customGreeting');
      if (customGreetingInput) customGreetingInput.value = savedCustomGreeting;
      customGreeting = savedCustomGreeting;
    }
    
    const savedWeatherUnit = localStorage.getItem('weatherUnit');
    if (savedWeatherUnit) {
      const weatherUnitSelect = document.getElementById('weatherUnitSelect');
      if (weatherUnitSelect) weatherUnitSelect.value = savedWeatherUnit;
      weatherUnit = savedWeatherUnit;
    }
  }
  
  // Hava Durumu
  let weatherUnit = 'C';
  let lastWeatherUpdate = 0;
  const WEATHER_UPDATE_INTERVAL = 10 * 60 * 1000; // 10 dakika
  
  async function getWeather() {
    const now = Date.now();
    if (now - lastWeatherUpdate >= WEATHER_UPDATE_INTERVAL) {
      try {
        const response = await fetch(`http://api.weatherapi.com/v1/current.json?key=d3478a747fff41d98e9161053241711&q=Nazilli&aqi=no`);
        if (!response.ok) throw new Error('Hava durumu verileri alınamadı');
        const data = await response.json();
        
        const weatherTranslations = {
          "Clear": "Açık", "Partly cloudy": "Parçalı bulutlu", "Cloudy": "Bulutlu",
          "Overcast": "Kapalı", "Mist": "Sisli", "Patchy rain possible": "Yer yer yağmur ihtimali",
          "Light rain": "Hafif yağmur", "Moderate rain": "Orta şiddette yağmur",
          "Heavy rain": "Yoğun yağmur", "Thunderstorm": "Gök gürültülü fırtına",
          "Snow": "Kar", "Fog": "Sis", "Drizzle": "Çiseleme", "Sunny": "Güneşli"
        };
        
        const weatherIcons = {
          "Açık": "fa-sun", "Güneşli": "fa-sun", "Parçalı bulutlu": "fa-cloud-sun",
          "Bulutlu": "fa-cloud", "Kapalı": "fa-cloud", "Sisli": "fa-smog",
          "Yer yer yağmur ihtimali": "fa-cloud-rain", "Hafif yağmur": "fa-cloud-showers-heavy",
          "Orta şiddette yağmur": "fa-cloud-showers-heavy", "Yoğun yağmur": "fa-cloud-showers-heavy",
          "Gök gürültülü fırtına": "fa-bolt", "Kar": "fa-snowflake", "Sis": "fa-smog",
          "Çiseleme": "fa-cloud-rain"
        };
        
        const condition = weatherTranslations[data.current.condition.text] || data.current.condition.text;
        const iconClass = weatherIcons[condition] || "fa-cloud";
        let temp = weatherUnit === 'C' ? `${data.current.temp_c}°C` : `${data.current.temp_f}°F`;
  
        const weatherIcon = document.getElementById('weatherIcon');
        const weatherCondition = document.getElementById('weatherCondition');
        const weatherTemp = document.getElementById('weatherTemp');
        const weatherHumidity = document.getElementById('weatherHumidity');
        const weatherWind = document.getElementById('weatherWind');
  
        if (weatherIcon) weatherIcon.className = `fas ${iconClass}`;
        if (weatherCondition) weatherCondition.textContent = condition;
        if (weatherTemp) weatherTemp.textContent = temp;
        if (weatherHumidity) weatherHumidity.textContent = `${data.current.humidity}%`;
        if (weatherWind) weatherWind.textContent = `${data.current.wind_kph} km/s`;
  
        lastWeatherUpdate = now;
      } catch (error) {
        console.error('Hava durumu alınamadı:', error);
        const weatherCondition = document.getElementById('weatherCondition');
        if (weatherCondition) weatherCondition.textContent = 'Hava durumu alınamadı. Lütfen tekrar deneyin.';
      }
    }
  }
  
  // Hava Durumu Birimini Değiştirme
  function changeWeatherUnit() {
    const unitSelect = document.getElementById('weatherUnitSelect');
    if (unitSelect) {
      weatherUnit = unitSelect.value;
      getWeather();
    }
  }
  
  // Notlar
  function saveNotes() {
    const notes = document.getElementById('notes')?.value;
    if (notes !== undefined) {
      localStorage.setItem('userNotes', notes);
      alert('Notlarınız kaydedildi!');
    }
  }
  
  function loadSavedNotes() {
    const notesElement = document.getElementById('notes');
    if (notesElement) {
      const savedNotes = localStorage.getItem('userNotes');
      if (savedNotes) notesElement.value = savedNotes;
    }
  }
  
  // Görevler
  function addTodo() {
    const input = document.getElementById('todoInput');
    const list = document.getElementById('todoList');
    if (input && list && input.value.trim()) {
      const li = document.createElement('li');
      li.innerHTML = `
        <span>${input.value}</span>
        <div>
          <button onclick="editTodo(this)" aria-label="Görevi düzenle"><i class="fas fa-edit"></i></button>
          <button onclick="deleteTodo(this)" aria-label="Görevi sil"><i class="fas fa-trash"></i></button>
        </div>
      `;
      list.appendChild(li);
      input.value = '';
      saveTodos();
    }
  }
  
  function editTodo(button) {
    const li = button.closest('li');
    const span = li.querySelector('span');
    const newText = prompt('Görevi düzenle:', span.textContent);
    if (newText && newText.trim()) {
      span.textContent = newText;
      saveTodos();
    }
  }
  
  function deleteTodo(button) {
    const li = button.closest('li');
    li.remove();
    saveTodos();
  }
  
  function saveTodos() {
    const list = document.getElementById('todoList');
    if (list) {
      const todos = [];
      list.querySelectorAll('li span').forEach(span => todos.push(span.textContent));
      localStorage.setItem('userTodos', JSON.stringify(todos));
    }
  }
  
  function loadSavedTodos() {
    const list = document.getElementById('todoList');
    if (list) {
      const savedTodos = localStorage.getItem('userTodos');
      if (savedTodos) {
        const todos = JSON.parse(savedTodos);
        todos.forEach(todo => {
          const li = document.createElement('li');
          li.innerHTML = `
            <span>${todo}</span>
            <div>
              <button onclick="editTodo(this)" aria-label="Görevi düzenle"><i class="fas fa-edit"></i></button>
              <button onclick="deleteTodo(this)" aria-label="Görevi sil"><i class="fas fa-trash"></i></button>
            </div>
          `;
          list.appendChild(li);
        });
      }
    }
  }
  
  // Müzik Çalar
  let player;
  let currentTrackIndex = 0;
  let playlist = [];
  let filteredPlaylist = [];
  
  function initMusicPlayer() {
    player = document.getElementById('audioPlayer');
    if (!player) return;
    
    // Müzik listesi
    playlist = [
      { path: '../arayüz4.5/music/imperialmarch.mp3', name: 'Imperial March', genre: 'Film Müziği' },
      { path: '../arayüz4.5/music/Panzerlied.mp3', name: 'Panzerlied', genre: 'Epik' },
      { path: '../arayüz4.5/music/videoplayback.mp3', name: 'Selda B. Bir Daha Gel Samsundan', genre: 'Nostaljik' },
      { path: '../arayüz4.5/music/laststand.mp3', name: 'Sabaton Last Stand', genre: 'Epik' },
      { path: '../arayüz4.5/music/wingedhussars.mp3', name: 'Sabaton Winged Hussars', genre: 'Epik' },
      { path: '../arayüz4.5/music/korsan.mp3', name: 'Karayip Korsanları', genre: 'Film Müziği' },
      { path: '../arayüz4.5/music/yürürün.mp3', name: 'Hacivat ve Karagöz Yürürün', genre: 'Nostaljik' },
      { path: '../arayüz4.5/music/nasimi.mp3', name: 'Sami Yusuf Nasimi', genre: 'Epik' },
      { path: '../arayüz4.5/music/twostepbefore.mp3', name: 'Cehenneme 2 Adım', genre: 'Film Müziği' }
    ];
    filteredPlaylist = [...playlist];
    
    // İlk şarkıyı yükle ve otomatik oynat
    loadTrack(0);
    updatePlaylistUI();
    player.play().catch(error => {
      console.warn('Otomatik oynatma engellendi:', error);
      // Oynatma butonunu oynatma durumuna göre güncelle
      document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-play"></i>';
    });
    
    // Şarkı bittiğinde sonraki şarkıya geç
    player.addEventListener('ended', () => changeTrack('next'));
    
    // İlerleme çubuğunu güncelle
    player.addEventListener('timeupdate', updateProgress);
    
    // Oynatma başladığında buton ikonunu güncelle
    player.addEventListener('play', () => {
      document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-pause"></i>';
    });
    
    // Duraklatıldığında buton ikonunu güncelle
    player.addEventListener('pause', () => {
      document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-play"></i>';
    });
  }
  
  function loadTrack(index) {
    currentTrackIndex = ((index % filteredPlaylist.length) + filteredPlaylist.length) % filteredPlaylist.length;
    const track = filteredPlaylist[currentTrackIndex];
    
    if (player) {
      player.src = track.path;
      player.load();
    }
    
    const trackTitle = document.getElementById('trackTitle');
    if (trackTitle) trackTitle.textContent = track.name;
  }
  
  function togglePlayPause() {
    if (player.paused) {
      player.play().catch(error => console.warn('Oynatma başarısız:', error));
    } else {
      player.pause();
    }
  }
  
  function changeTrack(direction) {
    if (direction === 'next') {
      loadTrack(currentTrackIndex + 1);
    } else if (direction === 'previous') {
      loadTrack(currentTrackIndex - 1);
    }
    player.play().catch(error => console.warn('Oynatma başarısız:', error));
  }
  
  function setVolume() {
    const volume = document.getElementById('volume').value;
    if (player) player.volume = volume;
  }
  
  function updateProgress() {
    if (player && player.duration) {
      const progress = document.getElementById('progress');
      const percentage = (player.currentTime / player.duration) * 100;
      if (progress) progress.style.width = `${percentage}%`;
    }
  }
  
  function seek(event) {
    const progressBar = document.querySelector('.progress-bar');
    if (player && progressBar) {
      const rect = progressBar.getBoundingClientRect();
      const clickX = event.clientX - rect.left;
      const percentage = clickX / rect.width;
      player.currentTime = percentage * player.duration;
    }
  }
  
  function filterPlaylist() {
    const genre = document.getElementById('genreFilter').value;
    filteredPlaylist = genre === 'all' ? [...playlist] : playlist.filter(track => track.genre === genre);
    currentTrackIndex = 0;
    loadTrack(0);
    updatePlaylistUI();
  }
  
  function togglePlaylist() {
    const playlistElement = document.getElementById('playlist');
    if (playlistElement) {
      playlistElement.style.display = playlistElement.style.display === 'block' ? 'none' : 'block';
    }
  }
  
  function updatePlaylistUI() {
    const playlistElement = document.getElementById('playlist');
    if (playlistElement) {
      playlistElement.innerHTML = '';
      filteredPlaylist.forEach((track, index) => {
        const li = document.createElement('li');
        li.textContent = `${track.name} (${track.genre})`;
        li.style.cursor = 'pointer';
        li.style.padding = '0.5rem';
        li.style.borderBottom = '1px solid var(--border)';
        if (index === currentTrackIndex) li.style.background = 'var(--hover)';
        li.addEventListener('click', () => {
          loadTrack(index);
          player.play().catch(error => console.warn('Oynatma başarısız:', error));
        });
        playlistElement.appendChild(li);
      });
    }
  }
  
  // Haberler
  async function loadNews() {
    const newsList = document.getElementById('newsList');
    const category = document.getElementById('newsCategory').value || 'gundem';
    if (!newsList) return;
    
    newsList.innerHTML = '<p>Yükleniyor...</p>';
    
    try {
      const response = await fetch(`https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Frss.haberler.com%2Frss.asp%3Fkategori%3D${category}`);
      if (!response.ok) throw new Error('Haberler alınamadı');
      const data = await response.json();
      
      newsList.innerHTML = '';
      data.items.slice(0, 10).forEach(item => {
        const div = document.createElement('div');
        div.className = 'news-item';
        div.style.padding = '1rem';
        div.style.borderBottom = '1px solid var(--border)';
        div.innerHTML = `
          <h3 style="font-size: 1.1rem; color: var(--primary);">${item.title}</h3>
          <p style="color: var(--text-secondary);">${item.description ? item.description.replace(/<[^>]+>/g, '').substring(0, 100) + '...' : 'Açıklama mevcut değil'}</p>
          <a href="${item.link}" target="_blank" style="color: var(--secondary);">Devamını oku</a>
        `;
        newsList.appendChild(div);
      });
    } catch (error) {
      console.error('Haberler alınamadı:', error);
      newsList.innerHTML = '<p>Haberler yüklenemedi. Lütfen tekrar deneyin.</p>';
    }
  }

   #####
   ESKİ STYLES.CSS
   #####

   /* Genel Sıfırlama ve Temel Ayarlar */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Montserrat', 'Poppins', sans-serif;
}

html {
  scroll-behavior: smooth;
}

body {
  min-height: 100vh;
  overflow-x: hidden;
  transition: background-color 0.5s ease;
}

/* Tema Değişkenleri */
:root {
  /* Varsayılan tema */
  --primary: #3a86ff;
  --secondary: #ff006e;
  --accent: #8338ec;
  --background: #0f172a;
  --surface: #1e293b;
  --surface-variant: #334155;
  --text-primary: #f8fafc;
  --text-secondary: #cbd5e1;
  --border: #475569;
  --shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
  --card-bg: rgba(30, 41, 59, 0.8);
  --hover: rgba(255, 255, 255, 0.1);
  --gradient: linear-gradient(135deg, var(--primary), var(--secondary));
  --transition: all 0.3s ease;
}

/* Tema Varyasyonları */
body.theme-dark {
  --primary: #60a5fa;
  --secondary: #f472b6;
  --accent: #a78bfa;
  --background: #111827;
  --surface: #1f2937;
  --surface-variant: #374151;
  --text-primary: #f9fafb;
  --text-secondary: #e5e7eb;
  --border: #4b5563;
  --card-bg: rgba(31, 41, 55, 0.8);
}

body.theme-light {
  --primary: #2563eb;
  --secondary: #db2777;
  --accent: #7c3aed;
  --background: #f1f5f9;
  --surface: #ffffff;
  --surface-variant: #e2e8f0;
  --text-primary: #0f172a;
  --text-secondary: #334155;
  --border: #cbd5e1;
  --card-bg: rgba(255, 255, 255, 0.8);
  --hover: rgba(0, 0, 0, 0.05);
}

body.theme-cyberpunk {
  --primary: #ff00ff;
  --secondary: #00ffff;
  --accent: #ffff00;
  --background: #0c0c16;
  --surface: #1a1a2e;
  --surface-variant: #2a2a4a;
  --text-primary: #ffffff;
  --text-secondary: #00ffff;
  --border: #ff00ff;
  --card-bg: rgba(26, 26, 46, 0.8);
  --hover: rgba(255, 0, 255, 0.2);
  --gradient: linear-gradient(135deg, #ff00ff, #00ffff);
}

body.theme-nature {
  --primary: #2ecc71;
  --secondary: #f1c40f;
  --accent: #3498db;
  --background: #1e3a2b;
  --surface: #2d4a3e;
  --surface-variant: #3c5a4e;
  --text-primary: #f0f9f1;
  --text-secondary: #d0e9d1;
  --border: #4a6b5d;
  --card-bg: rgba(45, 74, 62, 0.8);
  --hover: rgba(46, 204, 113, 0.2);
  --gradient: linear-gradient(135deg, #2ecc71, #f1c40f);
}

body.theme-space {
  --primary: #8e44ad;
  --secondary: #3498db;
  --accent: #e74c3c;
  --background: #0a0a18;
  --surface: #1a1a2e;
  --surface-variant: #2a2a4a;
  --text-primary: #ffffff;
  --text-secondary: #b0c4de;
  --border: #4a4a6a;
  --card-bg: rgba(26, 26, 46, 0.8);
  --hover: rgba(142, 68, 173, 0.2);
  --gradient: linear-gradient(135deg, #8e44ad, #3498db);
}

body.theme-turk {
  --primary: #e74c3c;
  --secondary: #f1c40f;
  --accent: #ffffff;
  --background: #1a1a2a;
  --surface: #2a2a3a;
  --surface-variant: #3a3a4a;
  --text-primary: #ffffff;
  --text-secondary: #f1c40f;
  --border: #e74c3c;
  --card-bg: rgba(42, 42, 58, 0.8);
  --hover: rgba(231, 76, 60, 0.2);
  --gradient: linear-gradient(135deg, #e74c3c, #f1c40f);
}

body.theme-ottoman {
  --primary: #c0392b;
  --secondary: #f39c12;
  --accent: #2c3e50;
  --background: #1e1e1e;
  --surface: #2e2e2e;
  --surface-variant: #3e3e3e;
  --text-primary: #f0e6d2;
  --text-secondary: #d4c4a1;
  --border: #4e4e4e;
  --card-bg: rgba(46, 46, 46, 0.8);
  --hover: rgba(192, 57, 43, 0.2);
  --gradient: linear-gradient(135deg, #c0392b, #f39c12);
}

body.theme-turan {
  --primary: #c0392b;
  --secondary: #3498db;
  --accent: #f1c40f;
  --background: #1a1a2a;
  --surface: #2a2a3a;
  --surface-variant: #3a3a4a;
  --text-primary: #ffffff;
  --text-secondary: #f1c40f;
  --border: #4a4a5a;
  --card-bg: rgba(42, 42, 58, 0.8);
  --hover: rgba(192, 57, 43, 0.2);
  --gradient: linear-gradient(135deg, #c0392b, #3498db);
}

body.theme-minimalist {
  --primary: #2c3e50;
  --secondary: #7f8c8d;
  --accent: #3498db;
  --background: #ecf0f1;
  --surface: #ffffff;
  --surface-variant: #f5f5f5;
  --text-primary: #2c3e50;
  --text-secondary: #7f8c8d;
  --border: #bdc3c7;
  --card-bg: rgba(255, 255, 255, 0.8);
  --hover: rgba(44, 62, 80, 0.1);
  --gradient: linear-gradient(135deg, #2c3e50, #7f8c8d);
}

body.theme-retro {
  --primary: #e67e22;
  --secondary: #8e44ad;
  --accent: #16a085;
  --background: #2c3e50;
  --surface: #34495e;
  --surface-variant: #4a5c6b;
  --text-primary: #ecf0f1;
  --text-secondary: #bdc3c7;
  --border: #5a6c7b;
  --card-bg: rgba(52, 73, 94, 0.8);
  --hover: rgba(230, 126, 34, 0.2);
  --gradient: linear-gradient(135deg, #e67e22, #8e44ad);
}

body.theme-neon {
  --primary: #00ff00;
  --secondary: #ff00ff;
  --accent: #00ffff;
  --background: #000000;
  --surface: #121212;
  --surface-variant: #222222;
  --text-primary: #ffffff;
  --text-secondary: #00ff00;
  --border: #333333;
  --card-bg: rgba(18, 18, 18, 0.8);
  --hover: rgba(0, 255, 0, 0.2);
  --gradient: linear-gradient(135deg, #00ff00, #ff00ff);
}

/* Arka Plan Efektleri */
.background-effects {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  overflow: hidden;
}

#particles-js {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: var(--background);
}

.gradient-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle at center, transparent 0%, var(--background) 100%);
  opacity: 0.8;
}

/* Ana Konteyner */
.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: var(--text-primary);
}

/* Üst Menü */
.top-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;
  background-color: var(--surface);
  box-shadow: var(--shadow);
  z-index: 100;
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.logo-image {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid var(--primary);
}

.logo-text {
  font-size: 1.5rem;
  font-weight: 700;
  background: var(--gradient);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.logo-text span {
  font-weight: 900;
}

.header-controls {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.time-display {
  text-align: right;
}

.time {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-primary);
}

.date {
  font-size: 0.85rem;
  color: var(--text-secondary);
}

.theme-toggle,
.settings-toggle {
  background: var(--surface-variant);
  color: var(--text-primary);
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: var(--transition);
  position: relative;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.theme-toggle::before,
.settings-toggle::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--gradient);
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: 0;
}

.theme-toggle:hover::before,
.settings-toggle:hover::before {
  opacity: 1;
}

.theme-toggle i,
.settings-toggle i {
  position: relative;
  z-index: 1;
  font-size: 1.2rem;
  transition: transform 0.3s ease;
}

.theme-toggle:hover,
.settings-toggle:hover {
  transform: scale(1.1);
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
}

.theme-toggle:hover i,
.settings-toggle:hover i {
  transform: rotate(30deg);
  color: #fff;
}

/* Ana İçerik */
.main-content {
  display: flex;
  flex: 1;
}

/* Sidebar */
.sidebar {
  width: 240px;
  background-color: var(--surface);
  padding: 1.5rem 0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: calc(100vh - 72px);
  position: sticky;
  top: 72px;
  box-shadow: var(--shadow);
  z-index: 90;
}

.nav-items {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 0 1rem;
}

.nav-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 0.875rem 1rem;
  border-radius: 0.75rem;
  cursor: pointer;
  transition: var(--transition);
  color: var(--text-primary);
  position: relative;
}

.nav-item::before {
  content: '';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  height: 60%;
  width: 3px;
  background: var(--primary);
  opacity: 0;
  transition: opacity 0.2s ease;
  border-radius: 0 3px 3px 0;
}

.nav-item:hover,
.nav-item.active {
  background: var(--hover);
  transform: translateX(5px);
}

.nav-item:hover::before,
.nav-item.active::before {
  opacity: 1;
}

.nav-item i {
  font-size: 1.25rem;
  color: var(--primary);
  transition: var(--transition);
}

.nav-item span {
  font-weight: 500;
  font-size: 1rem;
}

.sidebar-footer {
  padding: 1rem;
  border-top: 1px solid var(--border);
  margin-top: auto;
}

.user-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.85rem;
  color: var(--text-secondary);
}

.version {
  font-weight: 600;
  color: var(--primary);
}

/* İçerik Alanı */
.content-area {
  flex: 1;
  padding: 2rem;
  overflow-y: auto;
  background-color: rgba(var(--background), 0.5);
}

/* Karşılama Bölümü */
.welcome-section {
  margin-bottom: 2rem;
  text-align: center;
}

.greeting {
  font-size: 2.5rem;
  font-weight: 800;
  margin-bottom: 0.5rem;
  background: var(--gradient);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.tagline-container {
  height: 30px;
  position: relative;
  overflow: hidden;
}

.tagline {
  font-size: 1rem;
  font-style: italic;
  letter-spacing: 1px;
  position: absolute;
  width: 100%;
  opacity: 0;
  transform: translateY(100%);
  transition: var(--transition);
  color: var(--text-secondary);
}

.tagline.active {
  opacity: 1;
  transform: translateY(0);
}

/* Bölümler */
.sections-container {
  position: relative;
}

.section {
  display: none;
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.5s ease, transform 0.5s ease;
}

.section.active {
  display: block;
  opacity: 1;
  transform: translateY(0);
}

.section-title {
  font-size: 1.75rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
  color: var(--text-primary);
  position: relative;
  display: inline-block;
}

.section-title::after {
  content: '';
  position: absolute;
  bottom: -5px;
  left: 0;
  width: 50%;
  height: 3px;
  background: var(--gradient);
  border-radius: 3px;
}

/* Kartlar */
.card {
  background: var(--card-bg);
  border-radius: 16px;
  overflow: hidden;
  transition: var(--transition);
  box-shadow: var(--shadow);
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  margin-bottom: 1.5rem;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  border-color: var(--primary);
}

.card-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 1rem 1.5rem;
  background: rgba(0, 0, 0, 0.2);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.card-header i {
  font-size: 1.25rem;
  color: var(--primary);
}

.card-header h2 {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.card-content {
  padding: 1.5rem;
}

/* Dashboard Grid */
.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
}

/* Hızlı Erişim Kartı */
.quick-links {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 1rem;
}

.action-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 1rem;
  background: var(--surface-variant);
  border: none;
  border-radius: 12px;
  color: var(--text-primary);
  cursor: pointer;
  transition: var(--transition);
}

.action-button i {
  font-size: 1.5rem;
  color: var(--primary);
}

.action-button:hover {
  background: var(--primary);
  transform: translateY(-5px);
}

.action-button:hover i {
  color: var(--surface);
}

/* Hava Durumu Kartı */
.weather-info {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.weather-main {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.weather-main i {
  font-size: 3rem;
  color: var(--primary);
}

.weather-temp {
  display: flex;
  flex-direction: column;
}

.weather-temp span:first-child {
  font-size: 2rem;
  font-weight: 700;
}

.weather-details {
  display: flex;
  justify-content: space-between;
  margin-top: 1rem;
}

.weather-detail {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.weather-detail i {
  color: var(--secondary);
}

/* Notlar Kartı */
.notes-card textarea {
  width: 100%;
  height: 150px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 1rem;
  color: var(--text-primary);
  resize: none;
  font-family: inherit;
  transition: var(--transition);
}

.notes-card textarea:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(var(--primary-rgb), 0.3);
}

.save-button {
  margin-top: 1rem;
  padding: 0.75rem 1.5rem;
  background: var(--primary);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  transition: var(--transition);
}

.save-button:hover {
  background: var(--secondary);
  transform: translateY(-3px);
}

/* Oyunlar Bölümü */
.games-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
}

.game-buttons {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.game-button {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  background: var(--surface-variant);
  border: none;
  border-radius: 8px;
  color: var(--text-primary);
  cursor: pointer;
  transition: var(--transition);
  text-align: left;
  font-weight: 500;
}

.game-button i {
  color: var(--primary);
  font-size: 1.25rem;
}

.game-button:hover {
  background: var(--primary);
  transform: translateX(5px);
}

.game-button:hover i {
  color: white;
}

.game-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Araçlar Bölümü */
.tools-container {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.tools-category {
  margin-bottom: 1.5rem;
}

.category-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: var(--primary);
}

.tools-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

.tool-link {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  background: var(--surface-variant);
  border-radius: 8px;
  color: var(--text-primary);
  text-decoration: none;
  transition: var(--transition);
}

.tool-link i {
  color: var(--primary);
  font-size: 1.25rem;
}

.tool-link:hover {
  background: var(--primary);
  transform: translateY(-3px);
}

.tool-link:hover i {
  color: white;
}

/* Görevler Kartı */
.todo-form {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.todo-form input {
  flex: 1;
  padding: 0.75rem 1rem;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid var(--border);
  border-radius: 8px;
  color: var(--text-primary);
  font-family: inherit;
}

.todo-form input:focus {
  outline: none;
  border-color: var(--primary);
}

.todo-form button {
  padding: 0.75rem 1.5rem;
  background: var(--primary);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  transition: var(--transition);
}

.todo-form button:hover {
  background: var(--secondary);
  transform: translateY(-3px);
}

.todo-list {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.todo-list li {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.75rem 1rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  transition: var(--transition);
}

.todo-list li:hover {
  background: rgba(255, 255, 255, 0.1);
}

.todo-list li button {
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  transition: var(--transition);
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
}

.todo-list li button:hover {
  color: var(--primary);
  background: rgba(255, 255, 255, 0.1);
}

/* Müzik ve Haberler Bölümü */
.music-player-card,
.news-card {
  margin-bottom: 2rem;
}

/* Haber Widget'ı */
.news-widget {
  position: relative;
  margin: 1rem auto;
  margin-bottom: 2rem;
  background: var(--card-bg);
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: var(--shadow);
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
}

.news-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.news-controls select {
  padding: 0.75rem 1rem;
  background: var(--surface-variant);
  border: 1px solid var(--border);
  border-radius: 8px;
  color: var(--text-primary);
  font-family: inherit;
  appearance: none;
  -webkit-appearance: none;
  background-image: url('data:image/svg+xml;utf8,<svg fill="%23ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>');
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 1rem;
  transition: var(--transition);
}

.news-controls select:focus {
  outline: none;
  border-color: var(--primary);
}

.news-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-height: 350px;
  overflow-y: auto;
  padding-right: 0.5rem;
}

.news-item {
  display: flex;
  align-items: center;
  background: var(--surface-variant);
  border-radius: 12px;
  padding: 1rem;
  border: 1px solid rgba(255, 255, 255, 0.05);
  transition: var(--transition);
}

.news-item:hover {
  background: var(--hover);
  transform: translateY(-3px);
  border-color: var(--primary);
}

.news-item i {
  font-size: 1.25rem;
  margin-right: 1rem;
  color: var(--primary);
}

.news-item a {
  font-size: 1rem;
  font-weight: 500;
  color: var(--text-primary);
  text-decoration: none;
  flex: 1;
}

.news-item a:hover {
  color: var(--primary);
}

.news-item .news-date {
  font-size: 0.8rem;
  color: var(--text-secondary);
  margin-left: 0.75rem;
}

/* Müzik Çalar */
.music-player {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.player-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.track-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--primary);
}

.player-info select {
  padding: 0.5rem;
  background: var(--surface-variant);
  border: 1px solid var(--border);
  border-radius: 8px;
  color: var(--text-primary);
  font-family: inherit;
}

.player-controls {
  display: flex;
  justify-content: center;
  gap: 1.5rem;
  margin-bottom: 1rem;
}

.player-controls button {
  background: var(--surface-variant);
  border: none;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: var(--transition);
  color: var(--text-primary);
}

.player-controls button:hover {
  background: var(--primary);
  transform: scale(1.1);
}

.player-controls button i {
  font-size: 1.25rem;
}

.volume-control {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
}

.volume-control i {
  color: var(--text-secondary);
}

.volume-control input {
  flex: 1;
  -appearance: none;
  height: 5px;
  background: var(--surface-variant);
  border-radius: 5px;
  outline: none;
}

.volume-control input::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 15px;
  height: 15px;
  background: var(--primary);
  border-radius: 50%;
  cursor: pointer;
}

.progress-container {
  margin-bottom: 1rem;
}

.progress-bar {
  height: 5px;
  background: var(--surface-variant);
  border-radius: 5px;
  cursor: pointer;
  position: relative;
}

.progress {
  height: 100%;
  background: var(--primary);
  border-radius: 5px;
  width: 0;
}

.playlist-toggle {
  background: var(--surface-variant);
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1rem;
  color: var(--text-primary);
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.playlist-toggle:hover {
  background: var(--primary);
}

.playlist {
  display: none;
  margin-top: 1rem;
  max-height: 200px;
  overflow-y: auto;
  background: var(--surface-variant);
  border-radius: 8px;
  padding: 0.5rem;
}

/* Ayarlar Paneli */
.settings-panel {
  position: fixed;
  top: 70px;
  right: 0;
  width: 350px;
  background-color: var(--surface);
  border-left: 2px solid var(--primary);
  padding: 0;
  z-index: 1000;
  transform: translateX(100%);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: var(--shadow);
  max-height: calc(100vh - 70px);
  overflow-y: auto;
  border-radius: 0 0 0 16px;
}

.settings-panel.active {
  transform: translateX(0);
  box-shadow: -5px 0 25px rgba(0, 0, 0, 0.3);
}

/* Tema Seçici */
.theme-selector {
  position: fixed;
  top: 70px;
  right: 70px;
  width: 320px;
  background-color: var(--surface);
  border: 2px solid var(--primary);
  border-radius: 16px;
  padding: 0;
  z-index: 1000;
  transform: scale(0.9);
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
  box-shadow: var(--shadow);
  overflow: hidden;
}

.theme-selector.active {
  transform: scale(1);
  opacity: 1;
  visibility: visible;
}

.theme-selector-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
  border-bottom: 1px solid var(--border);
  background: rgba(0, 0, 0, 0.2);
}

.theme-selector-header h3 {
  font-size: 1.1rem;
  font-weight: 600;
  margin: 0;
  color: var(--primary);
}

.theme-options {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  padding: 1.5rem;
  max-height: 400px;
  overflow-y: auto;
}

.theme-option {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  transition: var(--transition);
}

.theme-option:hover {
  transform: translateY(-5px);
}

.theme-preview {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  border: 2px solid var(--border);
  transition: var(--transition);
  position: relative;
  overflow: hidden;
}

.theme-option:hover .theme-preview {
  border-color: var(--primary);
  box-shadow: 0 0 15px rgba(var(--primary-rgb), 0.5);
}

.theme-option span {
  font-size: 0.85rem;
  font-weight: 500;
  color: var(--text-secondary);
  transition: var(--transition);
}

.theme-option:hover span {
  color: var(--primary);
}

/* Tema Önizleme Renkleri */
.default-theme {
  background: linear-gradient(135deg, #3a86ff, #ff006e);
}

.dark-theme {
  background: linear-gradient(135deg, #60a5fa, #f472b6);
}

.light-theme {
  background: linear-gradient(135deg, #2563eb, #db2777);
}

.cyberpunk-theme {
  background: linear-gradient(135deg, #ff00ff, #00ffff);
}

.nature-theme {
  background: linear-gradient(135deg, #2ecc71, #f1c40f);
}

.space-theme {
  background: linear-gradient(135deg, #8e44ad, #3498db);
}

.turk-theme {
  background: linear-gradient(135deg, #e74c3c, #f1c40f);
}

.ottoman-theme {
  background: linear-gradient(135deg, #c0392b, #f39c12);
}

.turan-theme {
  background: linear-gradient(135deg, #c0392b, #3498db);
}

.minimalist-theme {
  background: linear-gradient(135deg, #2c3e50, #7f8c8d);
}

.retro-theme {
  background: linear-gradient(135deg, #e67e22, #8e44ad);
}

.neon-theme {
  background: linear-gradient(135deg, #00ff00, #ff00ff);
}

.settings-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
  border-bottom: 1px solid var(--border);
  background: rgba(0, 0, 0, 0.2);
}

.settings-header h2 {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 0;
  color: var(--primary);
}

.close-button {
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  font-size: 1.2rem;
  transition: var(--transition);
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
}

.close-button:hover {
  color: var(--primary);
  background: var(--hover);
  transform: rotate(90deg);
}

.settings-content {
  padding: 1.5rem;
}

.settings-group {
  margin-bottom: 1.5rem;
}

.settings-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--text-primary);
}

.settings-group select,
.settings-group input {
  width: 100%;
  padding: 0.75rem 1rem;
  background: var(--surface-variant);
  border: 1px solid var(--border);
  border-radius: 8px;
  color: var(--text-primary);
  font-family: inherit;
  transition: var(--transition);
}

.settings-group select:focus,
.settings-group input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(var(--primary-rgb), 0.2);
}

.save-settings {
  width: 100%;
  padding: 0.75rem 1.5rem;
  background: var(--primary);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  transition: var(--transition);
  margin-top: 1rem;
}

.save-settings:hover {
  background: var(--secondary);
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}
